<File version="3.1">
  <FileID>acc6eade-623f-427c-b74c-cc3d20c48680</FileID>
  <Preview>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
v/r/AfYHdHDN/m+QAAAAAElFTkSuQmCC</Preview>
  <Form>MWNL1CmI3BQAACODCAAAAAAABADNV11v2jAUfZ+0/2DlOWoJ30iANLJWqsZGtdDusXKC12YYu3KcFfbrd53Q
JUACN21hVSXUJL73HPue++H+xP/FAh0NP34gpJ8+EL16ZAPLW0WaLc5+hGImn6KzS6kW6a9Nij7Z
5JapKJRi0DyrmT+buDHXsWIDwWKtKLfJdezzMPjCVlM5Z2Lgdzq0FbTaTq/RZLVuzyKCLgD5J/hz
5eIx1kx9gzfXCh60RYKHkM8UGFquFFpJHlkJb2AOSx6Z0qu1h0+xll5AOfscLpgwrGBp2yZOo3/+
vPSQ6Vc5Y9bwEpAO2rg8ZEJ74R8w6Dp1m9R7zYNGZmfWsHivB42nbKmt4bMhMZakzPTiN5Bb25lQ
uVxGbFYGfZct6Z8npkV+xpKWezAft2wPK8t9YMGczcZhpEdyeXSNBSkcBzhfLp194to9fUOGah2K
+wtBfW4Oc6pitnP0u5ZXsKecY1hg3myei6cVeLbJIgqk4qH/FrseTgTQM1j/AXv6JLewESc1lgHV
AGwN65BQTttB2KQptRVahF2auU4ddleQuAXZR/0rMWNLqCmI1TcRM0kCuwGpmMT9zsDYnHOJbPrn
abrgk2cUay3F0ZPGT2BMfoQiZtVy5l+mXFIeYVIlE0Cz3YKS2tyt3WUK2OSJFkDHwGBQsvi3MKvX
tRrNprJgCl3chlFMuadXnI1oMHcll6rcPl/coZ0F8+1TvEvebpX1ykL1NNVxNKLq6FqNEiSfqoq1
PZMdgNc7dbToMkC04NJZAQORKQ5VnxLF7SFUPXBj6jN+9KBxg+IxDmQmN9XilsxtyakiUyTXYLqQ
+E4HHekNluhgt9pIkCzWqFqUxDplQ1B0TtCPTqiWCwHDZ34IPZlsGl2btPBNqZgtfjpxOpX1g6os
iX4SXmTjPvE+lHTSycaL/UW496K5Tw8tEyDU/JCfUlLMY84omH60riJYLu9qQklZv818cqrr5+TG
IJ3q1rnV6hr4VpfyxPc4x3TSXu/1+sxHO21ubJasdx+ouDd7T6ndFX3cVEGJt1vKY1bmLf/xtZoy
+XEKTb28CW72tC5+5n1ZJzOFsl6rpJHd1RtxyD08/xsN/wJlhi/g3BQAAA==</Form>
  <Code><![CDATA[#Variables
$Server = "dc01.brookspeppin.local"
$OUTree = ("OU=Workstations,OU=Managed,DC=brookspeppin,DC=local")
$MyDomain = 'brookspeppin.local'
$MyClearTextUsername = 'bpeppin'
$MyClearTextPassword = 'secretpassword'
$MyUsernameDomain = $MyDomain + '\' + $MyClearTextUsername
$SecurePassword = Convertto-SecureString -String $MyClearTextPassword -AsPlainText -force
$global:Credentials = New-object System.Management.Automation.PSCredential $MyUsernameDomain, $SecurePassword


$formComputerNamePrompt_Load={
	#TODO: Initialize Form Controls here
	if (("ActiveDirectory" -in (Get-Module).Name))
	{
		Write-Status "ActiveDirectory module loaded."
	}
	else
	{
		try
		{
			
			Import-Module ActiveDirectory -ErrorAction Stop
			Write-Status "Please enter computer name"
		}
		catch
		{
			Write-Status "Error Loading ActiveDirectory module..."
		}
		
	}
	
	$TSProgressUI = new-object -comobject Microsoft.SMS.TSProgressUI
	$TSProgressUI.CloseProgressDialog()
}



#region Control Helper Functions

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	$ListBox.DisplayMember = $DisplayMember
	$ListBox.ValueMember = $ValueMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}

function Write-Status
{
	
	[CmdletBinding()]
	param
	(
		[parameter(Mandatory = $true)]
		[ValidateNotNullOrEmpty()]
		[string]$Message
	)
	$statusbar1.Text = $Message
}
function Validate-OSDComputerName
{
	
	param (
		[string]$Computername
	)
	

	
	if ($Computername.Length -gt 15)
	{
		Write-Status "NAME EXCEEDS MAX LENGTH: Computer name $Computername cannot be more than 15 characters"
		return $False
	}
	
	
	if ($Computername -match "[^a-zA-Z0-9-]")
	{
		Write-Status "INVALID CHARACTERS ENTERED: Computer name $Computername can only have letters, numbers or dashes"
		return $False
	}
	
	return $True
	
}

function ValidateADObject
{
	param
	(
		[parameter(Mandatory = $true)]
		[string]$computername
	)
	
	Write-Status "Checking computer name $computername against AD..."
	#$computername
	try
	{
		$ADComputer = Get-AdComputer -Identity $computername -Server $Server -Credential $global:Credentials
	}
	catch
	{
		#Write-Status "ERROR Checking computer name against AD"
		Write-Status $_.Exception.Message
	}
	
	if ($ADComputer)
	{
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("DOMAIN COMPUTER ALREADY EXISTS: Do you want to replace [$computername] in Active Directory", 'Alert!', 4)
		switch ($OUTPUT)
		{
			'Yes'{
				return $true
			}
			'No'{
				Write-Status "Please Enter a Computer Name"
				return $false
			}
		}
		
	}
	else
	{
		Write-Status "No AD Object found. Confirm new computer object [$computername]"
		$OUTPUT = [System.Windows.Forms.MessageBox]::Show("CONFIRM NEW COMPUTER: Do you want to name this computer [$computername]?", 'Confirm', 4)
		switch ($OUTPUT)
		{
			'Yes'{
				return $true
				}
			'No'{
				Write-Status "Please Enter a Computer Name"
				return $false
			}
		}
		
	}
	
}
#endregion

$buttonSubmit_Click = {

	$this.Enabled = $False
	#TODO: Place custom script here

	#Process the pending messages before enabling the button
	[System.Windows.Forms.Application]::DoEvents()
	$this.Enabled = $True
	if (-not $ComputerName.Text)
	{
		Write-Status 'Please enter a ComputerName.'
		#throw 'No username specified.'
	}
	else
	{

		
		[string]$computername = $ComputerName.text
		Write-status "Computer name is $ComputerName"
		#$OUTPUT = [System.Windows.Forms.MessageBox]::Show("CONFIRM NEW COMPUTER: Do you want to name this computer [$computername]?", 'Confirm', 4)
		
		#Write-Status "Validating computer name format..."
		
		if ((Validate-OSDComputerName $computername))
		{
			#Write-Status "Validating computer name format...Looks good!"
			$format = $true
		}
		else
		{
			Write-Status "Please enter a new computer name"
		}
		
		# $credential = Get-Credential
		if ((ValidateADObject $computername))
		{
			Write-Status "Checking computer name against AD...Proceeding with $computername"
			$object = $true
		}
		else
		{
			#Write-Status "Please enter a new computer name"
		}
		
		If ($format -and $object)
		{
			$Global:name = $ComputerName
			try
			{
				$List = (Get-ADOrganizationalUnit -LDAPFilter '(name=*)' -Server $Server -SearchBase $OUTree -Credential $global:Credentials).DistinguishedName
			}
			catch
			{
				Write-Status $_.Exception.Message
			}

			#$list = ("One", "Two")
			Update-ListBox -list $OUList $List
			
			Write-Status 'Please select OU'
		}
		
	}
	
	
}

$OUList_SelectedIndexChanged = {
	
	#TODO: Place custom script here

}

$OUList_SelectedValueChanged={
	#TODO: Place custom script here
	$OUName = $OUList.text
	Write-Status $OUname
	$Global:OU = $OUName
	$buttonContinue.Enabled = $true

}

$formComputerNamePrompt_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#TODO: Place custom script here
	
}

$buttonContinue_Click = {

	#TODO: Place custom script here
	$OUTPUT = [System.Windows.Forms.MessageBox]::Show("ComputerName: $global:name" + "`n" + "OU: $global:OU" + "`n" + "Is this correct?", 'Confirm', 4)
	switch ($OUTPUT)
	{
		'Yes'{
			try
			{
				$TSEnvironment = New-Object -ComObject Microsoft.SMS.TSEnvironment -ErrorAction Stop
				if ([bool]$TSEnvironment)
				{
					
					$TSEnvironment.Value("OSDDomainOUName") = $global:OU
					$TSEnvironment.Value("OSDComputerName") = $global:name
					
				}
				else
				{
					
					if (!$DevTest)
					{
						Write-Status "Unable to instantiate the Microsoft.SMS.TSEnvironment. MDT task sequence not running."
					}
					
				}
				
			
			}
			catch
			{

			}
			$formComputerNamePrompt.Close()
		}
		'No'{
			Write-Status "Please Enter a Computer Name"
	
		}
	}
	
	
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>